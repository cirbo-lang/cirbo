package main

// +build ignore

import (
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"sort"

	"github.com/cirbo-lang/cirbo/cty"
)

func main() {
	f := openOutputFile()

	fmt.Fprintln(f, "package globals")
	fmt.Fprintln(f, "/////////////////")
	fmt.Fprintln(f, "// Generated by generate/generate_types_gen.go. DO NOT EDIT.")
	fmt.Fprintln(f, "/////////////////\n")

	fmt.Fprintln(f, "import (\n\t\"github.com/cirbo-lang/cirbo/cty\"\n)\n")

	var names []string
	for name := range cty.QuantityDimensionalities() {
		names = append(names, name)
	}
	sort.Strings(names)

	for _, name := range names {
		fmt.Fprintf(f, "var %s cty.Value = cty.TypeTypeVal(cty.%s)\n", name, name)
	}
}

func openOutputFile() io.Writer {
	outfile, err := os.Create("types_gen.go")
	if err != nil {
		log.Fatal(err)
	}
	// Pipe output to gofmt.
	gofmt := exec.Command("gofmt")
	fd, err := gofmt.StdinPipe()
	if err != nil {
		log.Fatal(err)
	}
	gofmt.Stdout = outfile
	gofmt.Stderr = os.Stderr
	err = gofmt.Start()
	if err != nil {
		log.Fatal(err)
	}
	return fd
}
