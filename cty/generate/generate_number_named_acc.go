package main

// +build ignore

import (
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"sort"

	"github.com/cirbo-lang/cirbo/cty"
)

func main() {
	f := openOutputFile()

	fmt.Fprintln(f, "package cty")
	fmt.Fprintln(f, "/////////////////")
	fmt.Fprintln(f, "// Generated by generate/generate_number_named_acc.go. DO NOT EDIT.")
	fmt.Fprintln(f, "/////////////////\n")

	var names []string
	dims := cty.QuantityDimensionalities()
	for name := range cty.QuantityDimensionalities() {
		names = append(names, name)
	}
	sort.Strings(names)

	for _, name := range names {
		dim := dims[name]
		fmt.Fprintf(f, "// %s is a quantity type of dimensionality %s.\n", name, dim)
		fmt.Fprintf(f, "var %s Type\n", name)
	}

	fmt.Fprintln(f, "\nfunc init() {")
	for _, name := range names {
		fmt.Fprintf(f, "\t%s = namedNumberTypes[%q]\n", name, name)
	}
	fmt.Fprintln(f, "}")
}

func openOutputFile() io.Writer {
	outfile, err := os.Create("number_named_acc.go")
	if err != nil {
		log.Fatal(err)
	}
	// Pipe output to gofmt.
	gofmt := exec.Command("gofmt")
	fd, err := gofmt.StdinPipe()
	if err != nil {
		log.Fatal(err)
	}
	gofmt.Stdout = outfile
	gofmt.Stderr = os.Stderr
	err = gofmt.Start()
	if err != nil {
		log.Fatal(err)
	}
	return fd
}
